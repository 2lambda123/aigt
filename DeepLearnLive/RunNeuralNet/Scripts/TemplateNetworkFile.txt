import os
import cv2
import sys
import numpy
import tensorflow
import tensorflow.keras
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers
from tensorflow.keras.models import model_from_json
#Add any additional modules that your network needs

''' 
Sample Model file for defining a neural network for use within the DeepLearnLive extension
Originally developed by Rebecca Hisey for the Laboratory of Percutaneous Surgery, Queens University, Kingston, ON

Model description: 
    Include a description of the intended use of your model here.
    This example shows a simple CNN that predicts tools from RGB images and returns a string
'''

class MODELNAME():
    def __init__(self):
        #Replace the following lines with all attributes needed to run the network
        # must include a variable to store all models that are used
        self.cnnModel = None
    
    
    def loadModel(self,modelFolder,modelName):
        #Replace the following lines with whatever needs to be done to load the model or models
        structureFileName = modelName + '.json'
        weightsFileName = modelName + '.h5'
        modelFolder = modelFolder.replace("'","")
        with open(os.path.join(modelFolder, structureFileName), "r") as modelStructureFile:
            JSONModel = modelStructureFile.read()
        model = model_from_json(JSONModel)
        model.load_weights(os.path.join(modelFolder, weightsFileName))
        return model

    def predict(self,image):
        #Replace the following lines with whatever needs to be done to use the model to predict on new data
        # in this case the image needed to be recoloured and resized and our prediction returns the tool name and the 
        # softmax output
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        labels = ['anesthetic', 'dilator', 'catheter', 'guidewire', 'guidewire_casing', 'nothing', 'scalpel', 'syringe']
        resized = cv2.resize(image, (224, 224))
        resized = numpy.expand_dims(resized, axis=0)
        toolClassification = self.cnnModel.predict(numpy.array(resized))
        labelIndex = numpy.argmax(toolClassification)
        label = labels[labelIndex]
        networkOutput = str(label) + str(toolClassification)
        return networkOutput
        
    def createModel(imageSize,num_classes):
        #Replace the following lines with your model definition
        # in this example we create a MobileNetV2 model and initialize the model with weights from training on ImageNet
        model = tensorflow.keras.models.Sequential()
        model.add(MobileNetV2(weights='imagenet',include_top=False,input_shape=imageSize))
        model.add(layers.GlobalAveragePooling2D())
        model.add(layers.Dense(512,activation='relu'))
        model.add(layers.Dense(num_classes,activation='softmax'))
        return model